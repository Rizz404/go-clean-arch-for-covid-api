// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: covids.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createCovid = `-- name: CreateCovid :one
INSERT INTO
  covids (id, nama, kota, sembuh, dirawat, meninggal, total)
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
RETURNING
  id, nama, kota, sembuh, dirawat, meninggal, total
`

type CreateCovidParams struct {
	ID        uuid.UUID `json:"id"`
	Nama      string    `json:"nama"`
	Kota      string    `json:"kota"`
	Sembuh    int32     `json:"sembuh"`
	Dirawat   int32     `json:"dirawat"`
	Meninggal int32     `json:"meninggal"`
	Total     int32     `json:"total"`
}

func (q *Queries) CreateCovid(ctx context.Context, arg CreateCovidParams) (Covid, error) {
	row := q.db.QueryRowContext(ctx, createCovid,
		arg.ID,
		arg.Nama,
		arg.Kota,
		arg.Sembuh,
		arg.Dirawat,
		arg.Meninggal,
		arg.Total,
	)
	var i Covid
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Kota,
		&i.Sembuh,
		&i.Dirawat,
		&i.Meninggal,
		&i.Total,
	)
	return i, err
}

const deleteCovid = `-- name: DeleteCovid :exec
DELETE FROM covids
WHERE
  id = $1
`

func (q *Queries) DeleteCovid(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCovid, id)
	return err
}

const getCovid = `-- name: GetCovid :one
SELECT
  id, nama, kota, sembuh, dirawat, meninggal, total
FROM
  covids
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetCovid(ctx context.Context, id uuid.UUID) (Covid, error) {
	row := q.db.QueryRowContext(ctx, getCovid, id)
	var i Covid
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Kota,
		&i.Sembuh,
		&i.Dirawat,
		&i.Meninggal,
		&i.Total,
	)
	return i, err
}

const getCovids = `-- name: GetCovids :many
SELECT
  id, nama, kota, sembuh, dirawat, meninggal, total
FROM
  covids
ORDER BY
  id
`

func (q *Queries) GetCovids(ctx context.Context) ([]Covid, error) {
	rows, err := q.db.QueryContext(ctx, getCovids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Covid
	for rows.Next() {
		var i Covid
		if err := rows.Scan(
			&i.ID,
			&i.Nama,
			&i.Kota,
			&i.Sembuh,
			&i.Dirawat,
			&i.Meninggal,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCovid = `-- name: UpdateCovid :one
UPDATE covids
SET
  nama = $1,
  kota = $2,
  sembuh = $3,
  dirawat = $4,
  meninggal = $5,
  total = $6
WHERE
  id = $7
RETURNING
  id, nama, kota, sembuh, dirawat, meninggal, total
`

type UpdateCovidParams struct {
	Nama      string    `json:"nama"`
	Kota      string    `json:"kota"`
	Sembuh    int32     `json:"sembuh"`
	Dirawat   int32     `json:"dirawat"`
	Meninggal int32     `json:"meninggal"`
	Total     int32     `json:"total"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCovid(ctx context.Context, arg UpdateCovidParams) (Covid, error) {
	row := q.db.QueryRowContext(ctx, updateCovid,
		arg.Nama,
		arg.Kota,
		arg.Sembuh,
		arg.Dirawat,
		arg.Meninggal,
		arg.Total,
		arg.ID,
	)
	var i Covid
	err := row.Scan(
		&i.ID,
		&i.Nama,
		&i.Kota,
		&i.Sembuh,
		&i.Dirawat,
		&i.Meninggal,
		&i.Total,
	)
	return i, err
}
